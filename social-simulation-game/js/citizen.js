class Citizen {
    constructor(x, y, district) {
        this.id = Math.random().toString(36).substr(2, 9);
        this.x = x;
        this.y = y;
        this.district = district;

        // Thu·ªôc t√≠nh c∆° b·∫£n
        this.age = Math.floor(Math.random() * 60) + 18;
        this.gender = Math.random() > 0.5 ? 'male' : 'female';
        this.education = this.generateEducation();
        this.personality = this.generatePersonality();
        this.job = this.assignJob();

        // Thu·ªôc t√≠nh tr·∫°ng th√°i
        this.happiness = Math.floor(Math.random() * 40) + 60;
        this.income = this.calculateIncome();
        this.health = Math.floor(Math.random() * 30) + 70;
        this.isProtesting = false;
        this.protestCooldown = 0;

        // Thu·ªôc t√≠nh di chuy·ªÉn
        this.targetX = x;
        this.targetY = y;
        this.speed = 1 + Math.random();
        this.activity = 'idle';
        this.activityTimer = 0;

        // L·ªãch tr√¨nh h√†ng ng√†y
        this.schedule = this.createDailySchedule();
        this.currentScheduleIndex = 0;
    }

    generateEducation() {
        const rand = Math.random();
        if (rand < 0.3) return 'basic';      // 30% - H·ªçc v·∫•n c∆° b·∫£n
        if (rand < 0.6) return 'high_school'; // 30% - Ph·ªï th√¥ng
        if (rand < 0.85) return 'college';    // 25% - Cao ƒë·∫≥ng
        return 'university';                  // 15% - ƒê·∫°i h·ªçc
    }

    generatePersonality() {
        const traits = ['patient', 'impatient', 'optimistic', 'pessimistic',
                       'hardworking', 'lazy', 'social', 'introverted',
                       'ambitious', 'content', 'creative', 'practical'];

        return {
            primary: traits[Math.floor(Math.random() * traits.length)],
            secondary: traits[Math.floor(Math.random() * traits.length)],
            protestTendency: Math.random() * 100, // KhÍ≤ΩÌñ•·∫øt tham gia bi·ªÉu t√¨nh
            adaptability: Math.random() * 100     // Kh·∫£ nƒÉng th√≠chÏùë
        };
    }

    assignJob() {
        const jobs = [
            // Ng√†nh n√¥ng nghi·ªáp
            { name: 'N√¥ng d√¢n', salary: 300, education: 'basic', type: 'agriculture' },
            { name: 'ChƒÉn nu√¥i', salary: 320, education: 'basic', type: 'agriculture' },

            // Ng√†nh c√¥ng nghi·ªáp
            { name: 'C√¥ng nh√¢n nh√† m√°y', salary: 450, education: 'high_school', type: 'industrial' },
            { name: 'Th·ª£ c∆° kh√≠', salary: 500, education: 'high_school', type: 'industrial' },
            { name: 'Th·ª£ ƒëi·ªán', salary: 520, education: 'college', type: 'industrial' },

            // Ng√†nh d·ªãch v·ª•
            { name: 'Nh√¢n vi√™n b√°n h√†ng', salary: 400, education: 'high_school', type: 'service' },
            { name: 'L√°i xe', salary: 380, education: 'high_school', type: 'service' },
            { name: 'Th·ª£ c·∫Øt t√≥c', salary: 350, education: 'basic', type: 'service' },
            { name: 'ƒê·∫ßu b·∫øp', salary: 420, education: 'high_school', type: 'service' },
            { name: 'Ph·ª•c v·ª• nh√† h√†ng', salary: 300, education: 'basic', type: 'service' },

            // Ng√†nh y t·∫ø
            { name: 'Y t√°', salary: 600, education: 'college', type: 'healthcare' },
            { name: 'B√°c sƒ©', salary: 1200, education: 'university', type: 'healthcare' },
            { name: 'D∆∞·ª£c sƒ©', salary: 800, education: 'university', type: 'healthcare' },

            // Ng√†nh gi√°o d·ª•c
            { name: 'Gi√°o vi√™n ti·ªÉu h·ªçc', salary: 550, education: 'college', type: 'education' },
            { name: 'Gi√°o vi√™n THPT', salary: 650, education: 'university', type: 'education' },
            { name: 'Gi·∫£ng vi√™n ƒë·∫°i h·ªçc', salary: 900, education: 'university', type: 'education' },

            // Ng√†nh c√¥ng ngh·ªá
            { name: 'L·∫≠p tr√¨nh vi√™n', salary: 1000, education: 'university', type: 'technology' },
            { name: 'K·ªπ s∆∞ IT', salary: 1100, education: 'university', type: 'technology' },

            // Ng√†nh t√†i ch√≠nh
            { name: 'Nh√¢n vi√™n ng√¢n h√†ng', salary: 700, education: 'university', type: 'finance' },
            { name: 'K·∫ø to√°n', salary: 600, education: 'college', type: 'finance' },

            // Ng√†nh x√¢y d·ª±ng
            { name: 'Th·ª£ x√¢y', salary: 400, education: 'basic', type: 'construction' },
            { name: 'Ki·∫øn tr√∫c s∆∞', salary: 950, education: 'university', type: 'construction' },

            // Ng√†nh kh√°c
            { name: 'C·∫£nh s√°t', salary: 550, education: 'high_school', type: 'public' },
            { name: 'L√≠nh c·ª©u h·ªèa', salary: 520, education: 'high_school', type: 'public' },
            { name: 'Lu·∫≠t s∆∞', salary: 1300, education: 'university', type: 'legal' },
            { name: 'Nh√† b√°o', salary: 650, education: 'university', type: 'media' },
            { name: 'Ngh·ªá sƒ©', salary: 400, education: 'college', type: 'arts' },
            { name: 'V·∫≠n ƒë·ªông vi√™n', salary: 800, education: 'high_school', type: 'sports' },
            { name: 'Th·ª£ s·ª≠a xe', salary: 450, education: 'high_school', type: 'service' },
            { name: 'B√°n th·ª©c ƒÉn nhanh', salary: 280, education: 'basic', type: 'service' },
            { name: 'B√°n n∆∞·ªõc', salary: 250, education: 'basic', type: 'service' }
        ];

        // L·ªçc c√¥ng vi·ªác ph√π h·ª£p v·ªõi h·ªçc v·∫•n
        const suitableJobs = jobs.filter(job => {
            const educationLevels = ['basic', 'high_school', 'college', 'university'];
            const citizenLevel = educationLevels.indexOf(this.education);
            const jobLevel = educationLevels.indexOf(job.education);
            return citizenLevel >= jobLevel;
        });

        if (Math.random() < 0.1 && this.age > 60) {
            return { name: 'V·ªÅ h∆∞u', salary: 200, type: 'retired' };
        }

        if (Math.random() < 0.05) {
            return { name: 'Th·∫•t nghi·ªáp', salary: 0, type: 'unemployed' };
        }

        return suitableJobs[Math.floor(Math.random() * suitableJobs.length)] || jobs[0];
    }

    calculateIncome() {
        let baseIncome = this.job.salary || 0;

        // ƒêi·ªÅu ch·ªânh thu nh·∫≠p theo t√≠nh c√°ch
        if (this.personality.primary === 'hardworking') baseIncome *= 1.2;
        if (this.personality.primary === 'lazy') baseIncome *= 0.8;
        if (this.personality.primary === 'ambitious') baseIncome *= 1.1;

        return Math.floor(baseIncome);
    }

    createDailySchedule() {
        const baseSchedule = [
            { time: 6, activity: 'wake_up', duration: 1 },
            { time: 7, activity: 'breakfast', duration: 1 },
        ];

        if (this.job.name !== 'Th·∫•t nghi·ªáp' && this.job.name !== 'V·ªÅ h∆∞u') {
            baseSchedule.push(
                { time: 8, activity: 'work', duration: 8 },
                { time: 16, activity: 'home', duration: 1 }
            );
        }

        baseSchedule.push(
            { time: 18, activity: 'dinner', duration: 1 },
            { time: 19, activity: 'leisure', duration: 3 },
            { time: 22, activity: 'sleep', duration: 8 }
        );

        return baseSchedule;
    }

    update(gameTime, policies) {
        this.updateActivity(gameTime);
        this.updateMood(policies);
        this.updateMovement();
        this.checkProtestConditions(policies);

        if (this.protestCooldown > 0) this.protestCooldown--;
    }

    updateActivity(gameTime) {
        this.activityTimer++;

        if (this.activityTimer > 100) { // Thay ƒë·ªïi ho·∫°t ƒë·ªông m·ªói 100 frame
            this.activityTimer = 0;
            const activities = ['idle', 'walking', 'working', 'shopping', 'socializing'];
            this.activity = activities[Math.floor(Math.random() * activities.length)];

            // ƒê·∫∑t m·ª•c ti√™u di chuy·ªÉn m·ªõi
            this.setNewTarget();
        }
    }

    updateMood(policies) {
        // T√°c ƒë·ªông c·ªßa thu·∫ø
        const taxImpact = policies.taxRate > 25 ? -(policies.taxRate - 25) * 0.5 : 0;

        // T√°c ƒë·ªông c·ªßa gi√°o d·ª•c v√† y t·∫ø
        const serviceImpact = (policies.educationBudget + policies.healthBudget) * 0.2;

        // T√°c ƒë·ªông c·ªßa t√≠nh c√°ch
        let personalityImpact = 0;
        if (this.personality.primary === 'optimistic') personalityImpact = 5;
        if (this.personality.primary === 'pessimistic') personalityImpact = -5;

        // C·∫≠p nh·∫≠t h·∫°nh ph√∫c
        let newHappiness = this.happiness + taxImpact + serviceImpact + personalityImpact * 0.1;
        this.happiness = Math.max(0, Math.min(100, newHappiness));
    }

    checkProtestConditions(policies) {
        if (this.protestCooldown > 0) return;

        const protestThreshold = 30;
        const taxTooHigh = policies.taxRate > 30;
        const unhappy = this.happiness < 30;
        const hasProtestTendency = this.personality.protestTendency > 60;

        if (taxTooHigh && unhappy && hasProtestTendency && Math.random() < 0.1) {
            this.startProtest();
        }
    }

    startProtest() {
        this.isProtesting = true;
        this.protestCooldown = 300; // 5 ph√∫t cooldown
        this.activity = 'protesting';

        // T√¨m khu v·ª±c trung t√¢m ƒë·ªÉ bi·ªÉu t√¨nh
        this.targetX = 500 + (Math.random() - 0.5) * 100;
        this.targetY = 300 + (Math.random() - 0.5) * 100;

        // Th√™m s·ª± ki·ªán bi·ªÉu t√¨nh
        gameEvents.addEvent(`üõ°Ô∏è D√¢n ${this.job.name} t·∫°i ${this.district} b·∫Øt ƒë·∫ßu bi·ªÉu t√¨nh ph·∫£n ƒë·ªëi thu·∫ø cao!`);
    }

    setNewTarget() {
        // Di chuy·ªÉn trong ph·∫°m vi qu·∫≠n c·ªßa m√¨nh
        const districtBounds = getDistrictBounds(this.district);
        this.targetX = districtBounds.x + Math.random() * districtBounds.width;
        this.targetY = districtBounds.y + Math.random() * districtBounds.height;
    }

    updateMovement() {
        const dx = this.targetX - this.x;
        const dy = this.targetY - this.y;
        const distance = Math.sqrt(dx * dx + dy * dy);

        if (distance > 2) {
            this.x += (dx / distance) * this.speed;
            this.y += (dy / distance) * this.speed;
        } else {
            // ƒê√£ ƒë·∫øn ƒë√≠ch, ƒë·∫∑t m·ª•c ti√™u m·ªõi
            this.setNewTarget();
        }
    }

    render(ctx) {
        // M√†u s·∫Øc d·ª±a tr√™n t√¨nh tr·∫°ng
        let color = '#4CAF50'; // Xanh l√° - b√¨nh th∆∞·ªùng

        if (this.isProtesting) {
            color = '#F44336'; // ƒê·ªè - ƒëang bi·ªÉu t√¨nh
        } else if (this.happiness < 30) {
            color = '#FF9800'; // Cam - kh√¥ng vui
        } else if (this.job.name === 'Th·∫•t nghi·ªáp') {
            color = '#9E9E9E'; // X√°m - th·∫•t nghi·ªáp
        }

        // V·∫Ω d√¢n d·∫°ng pixel
        ctx.fillStyle = color;
        ctx.fillRect(Math.floor(this.x), Math.floor(this.y), 4, 4);

        // Hi·ªÉn th·ªã bi·ªÉu t∆∞·ª£ng ho·∫°t ƒë·ªông
        if (this.activity === 'working') {
            ctx.fillStyle = '#2196F3';
            ctx.fillRect(Math.floor(this.x) + 1, Math.floor(this.y) - 2, 2, 1);
        } else if (this.isProtesting) {
            ctx.fillStyle = '#F44336';
            ctx.fillRect(Math.floor(this.x), Math.floor(this.y) - 3, 4, 1);
        }
    }

    getInfo() {
        return {
            id: this.id,
            age: this.age,
            gender: this.gender,
            education: this.education,
            job: this.job.name,
            income: this.income,
            happiness: Math.floor(this.happiness),
            health: this.health,
            personality: `${this.personality.primary}, ${this.personality.secondary}`,
            district: this.district,
            activity: this.activity,
            isProtesting: this.isProtesting
        };
    }
}
